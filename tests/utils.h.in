#include "tests/utils.cpp"

using namespace test;

// CMake will replace this definition with the correct path
// inside the build directory which means that out-of-source
// builds are possible and the tests can be run from any
// working directory.
#define TEST_FILES_DIRECTORY "@Test_Files_Directory@"

#define ASSERT(cond, err_string) if (!cond) { print_test_fail(err_string, __func__, __LINE__); }

// Compare two input objects and see that they are equivalent. They may
// be of different types, in which case a static_cast must be possible
// to perform from the expected to the received result.
#define ASSERT_EQ(result, expected, err_string) assert_eq(result, expected, err_string, __func__, __LINE__);

// Compare two input arrays and assert that they are identical.
// The objects must be of identical types implementing size(), cbegin()
// and cend() methods for iteration over the values. Their size and
// values are both controlled.
#define ASSERT_EQ_VEC(result, expected, err_string) assert_eq_vec(result, expected, err_string, __func__, __LINE__);

// Macro which adds a main function which runs the input test functions.
// The function will return the number of tests which failed.
#define RUN_TESTS(...) \
    int main(int argc, char* argv[]) { \
        std::cout << "Running tests in '" << __FILE__ << "'.\n"; \
        __VA_ARGS__ \
        if (num_failed == 0) { \
            cout << "All tests passed.\n\n"; \
        } \
        else if (num_failed == 1) { \
            cout << num_failed << " test failed.\n\n"; \
        } \
        else { \
            cout << num_failed << " tests failed.\n\n"; \
        } \
        return num_failed; \
    }

// Macro which wraps a test function with a void declaration
// and updates the test status afterwards.
#define ADD_TEST(name, ...) \
    void name() { \
        __VA_ARGS__ \
        finalize_test(); \
    }
